import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.callbacks import EarlyStopping

df = pd.read_csv('AAPL_data.csv')
df['Date'] = pd.to_datetime(df['Date'])
data = df['Close'].values.reshape(-1, 1)

scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)

def create_sequences(data, seq_length):
    X, y = [], []
    for i in range(len(data) - seq_length):
        X.append(data[i:i + seq_length])
        y.append(data[i + seq_length])
    return np.array(X), np.array(y)

sequence_length = 60
X, y = create_sequences(scaled_data, sequence_length)

split = int(0.8 * len(X))
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

model = Sequential()
model.add(LSTM(units=50, return_sequences=False, input_shape=(X_train.shape[1], 1)))
model.add(Dense(units=1))
model.compile(optimizer='adam', loss='mean_squared_error')

early_stopping = EarlyStopping(monitor='loss', patience=5, restore_best_weights=True)

history = model.fit(X_train, y_train, epochs=40, batch_size=32, callbacks=[early_stopping], verbose=1)

plt.figure(figsize=(10, 6))
plt.plot(history.history['loss'])
plt.title('Model Loss During Training')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.grid(True)
plt.tight_layout()
plt.show()

predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)
actual = scaler.inverse_transform(y_test.reshape(-1, 1))

test_dates = df['Date'].iloc[sequence_length + split:].reset_index(drop=True)

plt.figure(figsize=(12, 6))
plt.plot(test_dates, actual, label='Actual Prices', color='blue')
plt.plot(test_dates, predictions, label='Predicted Prices', color='red', linestyle='--')
plt.title('AAPL Stock Price Prediction vs Actual (Test Set)')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.xticks(rotation=45)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

rmse = np.sqrt(mean_squared_error(actual, predictions))
print(f"Root Mean Squared Error (RMSE): {rmse:.4f}")
print("Actual:", actual[:5].flatten())
print("Predicted:", predictions[:5].flatten())
